

ubuntu@master:~/nodejs$ mkdir nodejs
ubuntu@master:~/nodejs$ vim index.js

index.js
---
const express = require('express');
const client = require('prom-client');

const app = express();
const port = 3000;

// Create a Registry to register the metrics
const register = new client.Registry();

// Add a default label which is added to all metrics
register.setDefaultLabels({
  app: 'nodejs_dolfined_app'
});

// Enable the collection of default metrics
client.collectDefaultMetrics({ register });

// Define a custom metric for total HTTP requests to the root path
const rootHttpRequestCounter = new client.Counter({
  name: 'http_requests_root_total',
  help: 'Total number of HTTP requests to the root path',
});

// Register the custom metric
register.registerMetric(rootHttpRequestCounter);

// Middleware to count every request to the root path
app.use((req, res, next) => {
  if (req.path === '/') {
    rootHttpRequestCounter.inc();
  }
  next();
});

// Define a route for Prometheus to scrape
app.get('/metrics', async (req, res) => {
  res.set('Content-Type', register.contentType);
  res.end(await register.metrics());
});

// Define the root route
app.get('/', (req, res) => {
  res.send('Hello From DolfinED');
});

// Start the server
app.listen(port, () => {
  console.log(`Example app listening at http://localhost:${port}`);
});
---




ubuntu@master:~/nodejs$ vim Dockerfile

DockerFile
---
FROM node:lts
WORKDIR /usr/src/app
COPY . .

RUN npm install express prom-client

EXPOSE 3000
CMD["node", "index.js"]
---


ubuntu@master:~/nodejs$ docker build -t nodejs-app .
[+] Building 34.4s (9/9) FINISHED                                                                                              docker:default
 => [internal] load build definition from Dockerfile                                                                                     0.1s
 => => transferring dockerfile: 155B                                                                                                     0.0s
 => [internal] load .dockerignore      

ubuntu@master:~/nodejs$ docker images
REPOSITORY                           TAG        IMAGE ID       CREATED              SIZE
nodejs-app                           latest     f110d314b946   About a minute ago   1.11GB

ubuntu@master:~/nodejs$ docker images
REPOSITORY                           TAG        IMAGE ID       CREATED          SIZE
nodejs-app                           latest     f110d314b946   53 minutes ago   1.11GB

ubuntu@master:~/nodejs$ docker tag nodejs-app:latest menamagdyhalem/nodejs-app:v1
ubuntu@master:~/nodejs$ docker images
REPOSITORY                           TAG        IMAGE ID       CREATED          SIZE
menamagdyhalem/nodejs-app            v1         f110d314b946   55 minutes ago   1.11GB
nodejs-app                           latest     f110d314b946   55 minutes ago   1.11GB

# docker login
ubuntu@master:~/nodejs$ docker login
Log in with your Docker ID or email address to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com/ to create one.
You can log in with your password or a Personal Access Token (PAT). Using a limited-scope PAT grants better security and is required for organizations using SSO. Learn more at https://docs.docker.com/go/access-tokens/

Login Succeeded


ubuntu@master:~/nodejs$ docker push menamagdyhalem/nodejs-app:v1
The push refers to repository [docker.io/menamagdyhalem/nodejs-app]
b85a928a88ad: Pushed
75ce42d25bc6: Pushed
6f60b3778c35: Pushed
ac68e27ae9cc: Mounted from library/node
9cef422ea209: Mounted from library/node
09ddcd01d2dc: Mounted from library/node
5358370f44ab: Mounted from library/node
21e1c4948146: Mounted from library/node
68866beb2ed2: Mounted from library/node
e6e2ab10dba6: Mounted from library/node
0238a1790324: Mounted from library/node
v1: digest: sha256:99ee6edc8249adfa904e33f272020adf42277b3884130c9029932a13df58692d size: 2629



ubuntu@master:~/nodejs$ vim nodejs-app.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nodejs-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nodejs
  template:
    metadata:
      labels:
        app: nodejs
    spec:
      containers:
        - name: nodejs
          image: menamagdyhalem/nodejs-app:v1
          ports:
            - containerPort: 3000 
---
ubuntu@master:~/nodejs$ kubectl apply -f nodejs-app.yaml
deployment.apps/my-nodejs-app created

ubuntu@master:~/nodejs$ vim nodejs-svc.yaml

nodejs-svc
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-svc
  labels:
    app: nodejs
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: NodePort
  selector:
    app: nodejs
  ports:
    - port: 3000
      targetPort: 3000
      name: nodejs
---
ubuntu@master:~/nodejs$ kubectl apply -f nodejs-svc.yaml
service/nodejs-svc created


ubuntu@master:~$ vim nodejs-svc.yaml
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nodejs-monitor1
  namespace: monitoring  
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: nodejs  
  namespaceSelector:
    matchNames:
      - default  
  endpoints:
    - port: nodejs
      path: /metrics
---

ubuntu@master:~$ vim nodejs-alert.yaml

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: nodejs-alert
  namespace: monitoring
  labels:
    app: kube-prometheus-stack
    release: prometheus
spec:
  groups:
  - name: nodejs-alert
    rules:
    - alert: HighRequestRate_NodeJS
      expr: rate(http_requests_root_total[5m]) > 10
      for: 0m
      labels:
        app: nodejs
        namespace: monitoring
      annotations: 
        description: "The request rate to the root path has exceeded 10 requests."
        summary: "High request rate on root path"
---

ubuntu@master:~$ kubectl apply -f nodejs-alert.yaml
prometheusrule.monitoring.coreos.com/nodejs-alert created

ubuntu@master:~$ kubectl get prometheusrule -n monitoring
NAME                                                              AGE
dolfined-rule                                                     30d
dolfined.rule                                                     30d
nodejs-alert                                                      19s


ubuntu@master:~$ vim nodejs-alert-manager.yaml
---
apiVersion: monitoring.coreos.com/v1alpha1
kind: AlertmanagerConfig
metadata:
  name: nodejs-alert-manager
  namespace: monitoring
spec:
  route:
    receiver: 'nodejs-slack'
    repeatInterval: 30m
    routes:
    - matchers:
      - name: alertname
        value: HighRequestRate_NodeJS
      repeatInterval: 10m
  receivers:
  - name: 'nodejs-slack'
    slackConfigs:
      - apiURL:
          key: webhook
          name: slack-secret
        channel: '#highcpu-app'
        sendResolved: true
---

ubuntu@master:~$ kubectl apply -f nodejs-alert-manager.yaml
alertmanagerconfig.monitoring.coreos.com/nodejs-alert-manager created

ubuntu@master:~$ kubectl get alertmanagerconfig -n monitoring
NAME                     AGE
dolfined-alert-manager   30d
nodejs-alert-manager     44s



ubuntu@master:~$ vim send.sh
---
#!/bin/bash

send_requests() {
    while true; do
        curl -sS http://34.229.104.172:30005 > /dev/null
        echo "Request sent"
        sleep 0.0667  
    done
}

for ((i=1; i<=15; i++)); do
    send_requests &
    pids[$i]=$!
done

trap 'echo "Exiting..."; kill ${pids[*]}; exit' INT

wait
---

ubuntu@master:~$ chmod +x send.sh

ubuntu@master:~$ ./send.sh


ubuntu@master:~$ ./send.sh


